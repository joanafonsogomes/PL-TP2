Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Comandos
Rule 1     Comandos -> Comandos Comando
Rule 2     Comandos -> Comando
Rule 3     Comando -> Ler
Rule 4     Comando -> Escrever
Rule 5     Comando -> Despejar
Rule 6     Comando -> Atrib
Rule 7     Comando -> Exp
Rule 8     Comando -> End
Rule 9     Exp -> Exp + Termo
Rule 10    Exp -> Exp - Termo
Rule 11    Exp -> Termo
Rule 12    Termo -> Termo * Factor
Rule 13    Termo -> Termo / Factor
Rule 14    Termo -> Factor
Rule 15    Factor -> id
Rule 16    Factor -> num
Rule 17    Factor -> ( Exp )
Rule 18    Ler -> ? id
Rule 19    Escrever -> ! id
Rule 20    Despejar -> ! !
Rule 21    Atrib -> id = Exp
Rule 22    End -> ! ! !

Terminals, with rules where they appear

!                    : 19 20 20 22 22 22
(                    : 17
)                    : 17
*                    : 12
+                    : 9
-                    : 10
/                    : 13
=                    : 21
?                    : 18
error                : 
id                   : 15 18 19 21
num                  : 16

Nonterminals, with rules where they appear

Atrib                : 6
Comando              : 1 2
Comandos             : 1 0
Despejar             : 5
End                  : 8
Escrever             : 4
Exp                  : 7 9 10 17 21
Factor               : 12 13 14
Ler                  : 3
Termo                : 9 10 11 12 13

Parsing method: LALR

state 0

    (0) S' -> . Comandos
    (1) Comandos -> . Comandos Comando
    (2) Comandos -> . Comando
    (3) Comando -> . Ler
    (4) Comando -> . Escrever
    (5) Comando -> . Despejar
    (6) Comando -> . Atrib
    (7) Comando -> . Exp
    (8) Comando -> . End
    (18) Ler -> . ? id
    (19) Escrever -> . ! id
    (20) Despejar -> . ! !
    (21) Atrib -> . id = Exp
    (9) Exp -> . Exp + Termo
    (10) Exp -> . Exp - Termo
    (11) Exp -> . Termo
    (22) End -> . ! ! !
    (12) Termo -> . Termo * Factor
    (13) Termo -> . Termo / Factor
    (14) Termo -> . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    ?               shift and go to state 9
    !               shift and go to state 11
    id              shift and go to state 10
    num             shift and go to state 14
    (               shift and go to state 15

    Comandos                       shift and go to state 1
    Comando                        shift and go to state 2
    Ler                            shift and go to state 3
    Escrever                       shift and go to state 4
    Despejar                       shift and go to state 5
    Atrib                          shift and go to state 6
    Exp                            shift and go to state 7
    End                            shift and go to state 8
    Termo                          shift and go to state 12
    Factor                         shift and go to state 13

state 1

    (0) S' -> Comandos .
    (1) Comandos -> Comandos . Comando
    (3) Comando -> . Ler
    (4) Comando -> . Escrever
    (5) Comando -> . Despejar
    (6) Comando -> . Atrib
    (7) Comando -> . Exp
    (8) Comando -> . End
    (18) Ler -> . ? id
    (19) Escrever -> . ! id
    (20) Despejar -> . ! !
    (21) Atrib -> . id = Exp
    (9) Exp -> . Exp + Termo
    (10) Exp -> . Exp - Termo
    (11) Exp -> . Termo
    (22) End -> . ! ! !
    (12) Termo -> . Termo * Factor
    (13) Termo -> . Termo / Factor
    (14) Termo -> . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    ?               shift and go to state 9
    !               shift and go to state 11
    id              shift and go to state 10
    num             shift and go to state 14
    (               shift and go to state 15

    Comando                        shift and go to state 16
    Ler                            shift and go to state 3
    Escrever                       shift and go to state 4
    Despejar                       shift and go to state 5
    Atrib                          shift and go to state 6
    Exp                            shift and go to state 7
    End                            shift and go to state 8
    Termo                          shift and go to state 12
    Factor                         shift and go to state 13

state 2

    (2) Comandos -> Comando .

    ?               reduce using rule 2 (Comandos -> Comando .)
    !               reduce using rule 2 (Comandos -> Comando .)
    id              reduce using rule 2 (Comandos -> Comando .)
    num             reduce using rule 2 (Comandos -> Comando .)
    (               reduce using rule 2 (Comandos -> Comando .)
    $end            reduce using rule 2 (Comandos -> Comando .)


state 3

    (3) Comando -> Ler .

    ?               reduce using rule 3 (Comando -> Ler .)
    !               reduce using rule 3 (Comando -> Ler .)
    id              reduce using rule 3 (Comando -> Ler .)
    num             reduce using rule 3 (Comando -> Ler .)
    (               reduce using rule 3 (Comando -> Ler .)
    $end            reduce using rule 3 (Comando -> Ler .)


state 4

    (4) Comando -> Escrever .

    ?               reduce using rule 4 (Comando -> Escrever .)
    !               reduce using rule 4 (Comando -> Escrever .)
    id              reduce using rule 4 (Comando -> Escrever .)
    num             reduce using rule 4 (Comando -> Escrever .)
    (               reduce using rule 4 (Comando -> Escrever .)
    $end            reduce using rule 4 (Comando -> Escrever .)


state 5

    (5) Comando -> Despejar .

    ?               reduce using rule 5 (Comando -> Despejar .)
    !               reduce using rule 5 (Comando -> Despejar .)
    id              reduce using rule 5 (Comando -> Despejar .)
    num             reduce using rule 5 (Comando -> Despejar .)
    (               reduce using rule 5 (Comando -> Despejar .)
    $end            reduce using rule 5 (Comando -> Despejar .)


state 6

    (6) Comando -> Atrib .

    ?               reduce using rule 6 (Comando -> Atrib .)
    !               reduce using rule 6 (Comando -> Atrib .)
    id              reduce using rule 6 (Comando -> Atrib .)
    num             reduce using rule 6 (Comando -> Atrib .)
    (               reduce using rule 6 (Comando -> Atrib .)
    $end            reduce using rule 6 (Comando -> Atrib .)


state 7

    (7) Comando -> Exp .
    (9) Exp -> Exp . + Termo
    (10) Exp -> Exp . - Termo

    ?               reduce using rule 7 (Comando -> Exp .)
    !               reduce using rule 7 (Comando -> Exp .)
    id              reduce using rule 7 (Comando -> Exp .)
    num             reduce using rule 7 (Comando -> Exp .)
    (               reduce using rule 7 (Comando -> Exp .)
    $end            reduce using rule 7 (Comando -> Exp .)
    +               shift and go to state 17
    -               shift and go to state 18


state 8

    (8) Comando -> End .

    ?               reduce using rule 8 (Comando -> End .)
    !               reduce using rule 8 (Comando -> End .)
    id              reduce using rule 8 (Comando -> End .)
    num             reduce using rule 8 (Comando -> End .)
    (               reduce using rule 8 (Comando -> End .)
    $end            reduce using rule 8 (Comando -> End .)


state 9

    (18) Ler -> ? . id

    id              shift and go to state 19


state 10

    (21) Atrib -> id . = Exp
    (15) Factor -> id .

    =               shift and go to state 20
    *               reduce using rule 15 (Factor -> id .)
    /               reduce using rule 15 (Factor -> id .)
    +               reduce using rule 15 (Factor -> id .)
    -               reduce using rule 15 (Factor -> id .)
    ?               reduce using rule 15 (Factor -> id .)
    !               reduce using rule 15 (Factor -> id .)
    id              reduce using rule 15 (Factor -> id .)
    num             reduce using rule 15 (Factor -> id .)
    (               reduce using rule 15 (Factor -> id .)
    $end            reduce using rule 15 (Factor -> id .)


state 11

    (19) Escrever -> ! . id
    (20) Despejar -> ! . !
    (22) End -> ! . ! !

    id              shift and go to state 22
    !               shift and go to state 21


state 12

    (11) Exp -> Termo .
    (12) Termo -> Termo . * Factor
    (13) Termo -> Termo . / Factor

    +               reduce using rule 11 (Exp -> Termo .)
    -               reduce using rule 11 (Exp -> Termo .)
    ?               reduce using rule 11 (Exp -> Termo .)
    !               reduce using rule 11 (Exp -> Termo .)
    id              reduce using rule 11 (Exp -> Termo .)
    num             reduce using rule 11 (Exp -> Termo .)
    (               reduce using rule 11 (Exp -> Termo .)
    $end            reduce using rule 11 (Exp -> Termo .)
    )               reduce using rule 11 (Exp -> Termo .)
    *               shift and go to state 23
    /               shift and go to state 24


state 13

    (14) Termo -> Factor .

    *               reduce using rule 14 (Termo -> Factor .)
    /               reduce using rule 14 (Termo -> Factor .)
    +               reduce using rule 14 (Termo -> Factor .)
    -               reduce using rule 14 (Termo -> Factor .)
    ?               reduce using rule 14 (Termo -> Factor .)
    !               reduce using rule 14 (Termo -> Factor .)
    id              reduce using rule 14 (Termo -> Factor .)
    num             reduce using rule 14 (Termo -> Factor .)
    (               reduce using rule 14 (Termo -> Factor .)
    $end            reduce using rule 14 (Termo -> Factor .)
    )               reduce using rule 14 (Termo -> Factor .)


state 14

    (16) Factor -> num .

    *               reduce using rule 16 (Factor -> num .)
    /               reduce using rule 16 (Factor -> num .)
    +               reduce using rule 16 (Factor -> num .)
    -               reduce using rule 16 (Factor -> num .)
    ?               reduce using rule 16 (Factor -> num .)
    !               reduce using rule 16 (Factor -> num .)
    id              reduce using rule 16 (Factor -> num .)
    num             reduce using rule 16 (Factor -> num .)
    (               reduce using rule 16 (Factor -> num .)
    $end            reduce using rule 16 (Factor -> num .)
    )               reduce using rule 16 (Factor -> num .)


state 15

    (17) Factor -> ( . Exp )
    (9) Exp -> . Exp + Termo
    (10) Exp -> . Exp - Termo
    (11) Exp -> . Termo
    (12) Termo -> . Termo * Factor
    (13) Termo -> . Termo / Factor
    (14) Termo -> . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    id              shift and go to state 26
    num             shift and go to state 14
    (               shift and go to state 15

    Exp                            shift and go to state 25
    Termo                          shift and go to state 12
    Factor                         shift and go to state 13

state 16

    (1) Comandos -> Comandos Comando .

    ?               reduce using rule 1 (Comandos -> Comandos Comando .)
    !               reduce using rule 1 (Comandos -> Comandos Comando .)
    id              reduce using rule 1 (Comandos -> Comandos Comando .)
    num             reduce using rule 1 (Comandos -> Comandos Comando .)
    (               reduce using rule 1 (Comandos -> Comandos Comando .)
    $end            reduce using rule 1 (Comandos -> Comandos Comando .)


state 17

    (9) Exp -> Exp + . Termo
    (12) Termo -> . Termo * Factor
    (13) Termo -> . Termo / Factor
    (14) Termo -> . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    id              shift and go to state 26
    num             shift and go to state 14
    (               shift and go to state 15

    Termo                          shift and go to state 27
    Factor                         shift and go to state 13

state 18

    (10) Exp -> Exp - . Termo
    (12) Termo -> . Termo * Factor
    (13) Termo -> . Termo / Factor
    (14) Termo -> . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    id              shift and go to state 26
    num             shift and go to state 14
    (               shift and go to state 15

    Termo                          shift and go to state 28
    Factor                         shift and go to state 13

state 19

    (18) Ler -> ? id .

    ?               reduce using rule 18 (Ler -> ? id .)
    !               reduce using rule 18 (Ler -> ? id .)
    id              reduce using rule 18 (Ler -> ? id .)
    num             reduce using rule 18 (Ler -> ? id .)
    (               reduce using rule 18 (Ler -> ? id .)
    $end            reduce using rule 18 (Ler -> ? id .)


state 20

    (21) Atrib -> id = . Exp
    (9) Exp -> . Exp + Termo
    (10) Exp -> . Exp - Termo
    (11) Exp -> . Termo
    (12) Termo -> . Termo * Factor
    (13) Termo -> . Termo / Factor
    (14) Termo -> . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    id              shift and go to state 26
    num             shift and go to state 14
    (               shift and go to state 15

    Exp                            shift and go to state 29
    Termo                          shift and go to state 12
    Factor                         shift and go to state 13

state 21

    (20) Despejar -> ! ! .
    (22) End -> ! ! . !

  ! shift/reduce conflict for ! resolved as shift
    ?               reduce using rule 20 (Despejar -> ! ! .)
    id              reduce using rule 20 (Despejar -> ! ! .)
    num             reduce using rule 20 (Despejar -> ! ! .)
    (               reduce using rule 20 (Despejar -> ! ! .)
    $end            reduce using rule 20 (Despejar -> ! ! .)
    !               shift and go to state 30

  ! !               [ reduce using rule 20 (Despejar -> ! ! .) ]


state 22

    (19) Escrever -> ! id .

    ?               reduce using rule 19 (Escrever -> ! id .)
    !               reduce using rule 19 (Escrever -> ! id .)
    id              reduce using rule 19 (Escrever -> ! id .)
    num             reduce using rule 19 (Escrever -> ! id .)
    (               reduce using rule 19 (Escrever -> ! id .)
    $end            reduce using rule 19 (Escrever -> ! id .)


state 23

    (12) Termo -> Termo * . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    id              shift and go to state 26
    num             shift and go to state 14
    (               shift and go to state 15

    Factor                         shift and go to state 31

state 24

    (13) Termo -> Termo / . Factor
    (15) Factor -> . id
    (16) Factor -> . num
    (17) Factor -> . ( Exp )

    id              shift and go to state 26
    num             shift and go to state 14
    (               shift and go to state 15

    Factor                         shift and go to state 32

state 25

    (17) Factor -> ( Exp . )
    (9) Exp -> Exp . + Termo
    (10) Exp -> Exp . - Termo

    )               shift and go to state 33
    +               shift and go to state 17
    -               shift and go to state 18


state 26

    (15) Factor -> id .

    *               reduce using rule 15 (Factor -> id .)
    /               reduce using rule 15 (Factor -> id .)
    )               reduce using rule 15 (Factor -> id .)
    +               reduce using rule 15 (Factor -> id .)
    -               reduce using rule 15 (Factor -> id .)
    ?               reduce using rule 15 (Factor -> id .)
    !               reduce using rule 15 (Factor -> id .)
    id              reduce using rule 15 (Factor -> id .)
    num             reduce using rule 15 (Factor -> id .)
    (               reduce using rule 15 (Factor -> id .)
    $end            reduce using rule 15 (Factor -> id .)


state 27

    (9) Exp -> Exp + Termo .
    (12) Termo -> Termo . * Factor
    (13) Termo -> Termo . / Factor

    +               reduce using rule 9 (Exp -> Exp + Termo .)
    -               reduce using rule 9 (Exp -> Exp + Termo .)
    ?               reduce using rule 9 (Exp -> Exp + Termo .)
    !               reduce using rule 9 (Exp -> Exp + Termo .)
    id              reduce using rule 9 (Exp -> Exp + Termo .)
    num             reduce using rule 9 (Exp -> Exp + Termo .)
    (               reduce using rule 9 (Exp -> Exp + Termo .)
    $end            reduce using rule 9 (Exp -> Exp + Termo .)
    )               reduce using rule 9 (Exp -> Exp + Termo .)
    *               shift and go to state 23
    /               shift and go to state 24


state 28

    (10) Exp -> Exp - Termo .
    (12) Termo -> Termo . * Factor
    (13) Termo -> Termo . / Factor

    +               reduce using rule 10 (Exp -> Exp - Termo .)
    -               reduce using rule 10 (Exp -> Exp - Termo .)
    ?               reduce using rule 10 (Exp -> Exp - Termo .)
    !               reduce using rule 10 (Exp -> Exp - Termo .)
    id              reduce using rule 10 (Exp -> Exp - Termo .)
    num             reduce using rule 10 (Exp -> Exp - Termo .)
    (               reduce using rule 10 (Exp -> Exp - Termo .)
    $end            reduce using rule 10 (Exp -> Exp - Termo .)
    )               reduce using rule 10 (Exp -> Exp - Termo .)
    *               shift and go to state 23
    /               shift and go to state 24


state 29

    (21) Atrib -> id = Exp .
    (9) Exp -> Exp . + Termo
    (10) Exp -> Exp . - Termo

    ?               reduce using rule 21 (Atrib -> id = Exp .)
    !               reduce using rule 21 (Atrib -> id = Exp .)
    id              reduce using rule 21 (Atrib -> id = Exp .)
    num             reduce using rule 21 (Atrib -> id = Exp .)
    (               reduce using rule 21 (Atrib -> id = Exp .)
    $end            reduce using rule 21 (Atrib -> id = Exp .)
    +               shift and go to state 17
    -               shift and go to state 18


state 30

    (22) End -> ! ! ! .

    ?               reduce using rule 22 (End -> ! ! ! .)
    !               reduce using rule 22 (End -> ! ! ! .)
    id              reduce using rule 22 (End -> ! ! ! .)
    num             reduce using rule 22 (End -> ! ! ! .)
    (               reduce using rule 22 (End -> ! ! ! .)
    $end            reduce using rule 22 (End -> ! ! ! .)


state 31

    (12) Termo -> Termo * Factor .

    *               reduce using rule 12 (Termo -> Termo * Factor .)
    /               reduce using rule 12 (Termo -> Termo * Factor .)
    +               reduce using rule 12 (Termo -> Termo * Factor .)
    -               reduce using rule 12 (Termo -> Termo * Factor .)
    ?               reduce using rule 12 (Termo -> Termo * Factor .)
    !               reduce using rule 12 (Termo -> Termo * Factor .)
    id              reduce using rule 12 (Termo -> Termo * Factor .)
    num             reduce using rule 12 (Termo -> Termo * Factor .)
    (               reduce using rule 12 (Termo -> Termo * Factor .)
    $end            reduce using rule 12 (Termo -> Termo * Factor .)
    )               reduce using rule 12 (Termo -> Termo * Factor .)


state 32

    (13) Termo -> Termo / Factor .

    *               reduce using rule 13 (Termo -> Termo / Factor .)
    /               reduce using rule 13 (Termo -> Termo / Factor .)
    +               reduce using rule 13 (Termo -> Termo / Factor .)
    -               reduce using rule 13 (Termo -> Termo / Factor .)
    ?               reduce using rule 13 (Termo -> Termo / Factor .)
    !               reduce using rule 13 (Termo -> Termo / Factor .)
    id              reduce using rule 13 (Termo -> Termo / Factor .)
    num             reduce using rule 13 (Termo -> Termo / Factor .)
    (               reduce using rule 13 (Termo -> Termo / Factor .)
    $end            reduce using rule 13 (Termo -> Termo / Factor .)
    )               reduce using rule 13 (Termo -> Termo / Factor .)


state 33

    (17) Factor -> ( Exp ) .

    *               reduce using rule 17 (Factor -> ( Exp ) .)
    /               reduce using rule 17 (Factor -> ( Exp ) .)
    +               reduce using rule 17 (Factor -> ( Exp ) .)
    -               reduce using rule 17 (Factor -> ( Exp ) .)
    ?               reduce using rule 17 (Factor -> ( Exp ) .)
    !               reduce using rule 17 (Factor -> ( Exp ) .)
    id              reduce using rule 17 (Factor -> ( Exp ) .)
    num             reduce using rule 17 (Factor -> ( Exp ) .)
    (               reduce using rule 17 (Factor -> ( Exp ) .)
    $end            reduce using rule 17 (Factor -> ( Exp ) .)
    )               reduce using rule 17 (Factor -> ( Exp ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ! in state 21 resolved as shift
